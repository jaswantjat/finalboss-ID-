# Ultra-robust Dockerfile with comprehensive package management
FROM python:3.11-slim-bookworm

# Environment variables for optimal behavior
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    PIP_DEFAULT_TIMEOUT=600 \
    PIP_RETRIES=3 \
    DEBIAN_FRONTEND=noninteractive

# Update package lists and install core utilities first
RUN apt-get update && apt-get upgrade -y

# Install essential packages in stages with comprehensive error handling
RUN apt-get install -y --no-install-recommends \
    # Core utilities
    curl \
    wget \
    ca-certificates \
    gnupg \
    lsb-release \
    && apt-get clean

# Install build tools
RUN apt-get install -y --no-install-recommends \
    build-essential \
    gcc \
    g++ \
    make \
    cmake \
    pkg-config \
    && apt-get clean

# Install Tesseract with comprehensive language support
RUN apt-get install -y --no-install-recommends \
    tesseract-ocr \
    && apt-get clean

# Try to install language packs with multiple fallbacks
RUN (apt-get install -y --no-install-recommends tesseract-ocr-spa) || \
    (apt-get install -y --no-install-recommends tesseract-ocr-all) || \
    (apt-get install -y --no-install-recommends tesseract-ocr-eng) || \
    echo "Using default Tesseract language"

# Install graphics and multimedia libraries
RUN apt-get install -y --no-install-recommends \
    # Core graphics libraries
    libglib2.0-0 \
    libglib2.0-dev \
    # X11 and graphics
    libsm6 \
    libxext6 \
    libxrender-dev \
    libxrender1 \
    # OpenMP and math libraries
    libgomp1 \
    libgfortran5 \
    libblas3 \
    liblapack3 \
    && apt-get clean

# Install OpenGL libraries with comprehensive fallbacks
RUN (apt-get install -y --no-install-recommends libgl1-mesa-glx libgl1-mesa-dev) || \
    (apt-get install -y --no-install-recommends libgl1-mesa-glx) || \
    (apt-get install -y --no-install-recommends libgl1) || \
    (apt-get install -y --no-install-recommends mesa-common-dev) || \
    echo "OpenGL libraries not available, continuing without"

# Install additional multimedia and image processing libraries
RUN apt-get install -y --no-install-recommends \
    # Image processing
    libjpeg62-turbo-dev \
    libpng-dev \
    libtiff5-dev \
    libwebp-dev \
    # Font libraries
    libfontconfig1-dev \
    libfreetype6-dev \
    && apt-get clean

# Final cleanup
RUN rm -rf /var/lib/apt/lists/* && \
    apt-get autoclean && \
    apt-get autoremove -y

WORKDIR /app

# Upgrade pip and install build tools
RUN python -m pip install --upgrade pip setuptools wheel

# Install Python dependencies in optimized stages
# Stage 1: Core foundation
RUN pip install --no-cache-dir numpy>=1.20.0

# Stage 2: Image processing
RUN pip install --no-cache-dir \
    pillow>=9.0.0 \
    opencv-python-headless>=4.5.0

# Stage 3: Web framework
RUN pip install --no-cache-dir \
    fastapi>=0.104.0 \
    uvicorn>=0.24.0 \
    python-multipart>=0.0.6 \
    python-jose>=3.3.0

# Stage 4: Document processing
RUN pip install --no-cache-dir \
    pytesseract>=0.3.8 \
    reportlab>=4.0.0 \
    img2pdf>=0.4.4

# Stage 5: PyTorch (CPU-optimized)
RUN pip install --no-cache-dir \
    torch>=1.11.0 \
    torchvision>=0.12.0 \
    --index-url https://download.pytorch.org/whl/cpu

# Stage 6: ML libraries
RUN pip install --no-cache-dir \
    transformers>=4.20.0 \
    sentencepiece>=0.1.96 \
    onnxruntime>=1.12.0

# Stage 7: Background removal
RUN pip install --no-cache-dir rembg>=2.0.67

# Stage 8: PaddleOCR with extensive retry logic
RUN pip install --no-cache-dir paddleocr>=3.0.3 || \
    (echo "PaddleOCR install failed, retrying with --no-deps..." && \
     pip install --no-cache-dir --no-deps paddleocr>=3.0.3) || \
    (echo "PaddleOCR install failed, trying alternative approach..." && \
     pip install --no-cache-dir paddlepaddle-cpu && \
     pip install --no-cache-dir paddleocr>=3.0.3) || \
    echo "PaddleOCR installation failed, continuing without advanced OCR"

# Copy application code
COPY . .

# Expose port
EXPOSE 8000

# Comprehensive healthcheck
HEALTHCHECK --interval=30s --timeout=15s --start-period=30s --retries=3 \
  CMD python -c "import urllib.request,os,sys; urllib.request.urlopen(f'http://127.0.0.1:{os.getenv(\"PORT\",\"8000\")}/health', timeout=10); sys.exit(0)" || exit 1

# Start application with proper shell expansion
CMD ["sh", "-c", "uvicorn api_service:app --host 0.0.0.0 --port ${PORT:-8000}"]
